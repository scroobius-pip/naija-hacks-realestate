// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Property,
  Location,
  Cost,
  RegisterResult,
  LoginResult
} from "../src/types/models.d";
import { Context } from "../src/types/types.d";

export type UserType = "Agency" | "Individual";
export type CostType = "Rent" | "Sale";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsProperties {
    type?: CostType | null;
  }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type PropertiesResolver =
    | ((
        parent: undefined,
        args: ArgsProperties,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Property[] | Promise<Property[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | Promise<Property[]>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    properties:
      | ((
          parent: undefined,
          args: ArgsProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | Promise<Property[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsProperties,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Property[] | Promise<Property[]>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    phone: (parent: User) => parent.phone,
    name: (parent: User) => parent.name
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PhoneResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TypeResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserType | Promise<UserType>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserType | Promise<UserType>;
      };

  export type PropertiesResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Property[] | Promise<Property[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | Promise<Property[]>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    phone:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    type:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserType | Promise<UserType>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserType | Promise<UserType>;
        };

    properties:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | Promise<Property[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Property[] | Promise<Property[]>;
        };
  }
}

export namespace PropertyResolvers {
  export const defaultResolvers = {
    id: (parent: Property) => parent.id,
    title: (parent: Property) => parent.title,
    images: (parent: Property) => parent.images,
    description: (parent: Property) => parent.description
  };

  export type IdResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type LocationResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Location | Promise<Location>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Location | Promise<Location>;
      };

  export type CostResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Cost | Promise<Cost>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Cost | Promise<Cost>;
      };

  export type OwnerResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ImagesResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | Promise<string[]>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>;
      };

  export type DescriptionResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    location:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Location | Promise<Location>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Location | Promise<Location>;
        };

    cost:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Cost | Promise<Cost>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Cost | Promise<Cost>;
        };

    owner:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    images:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | Promise<string[]>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | Promise<string[]>;
        };

    description:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace LocationResolvers {
  export const defaultResolvers = {
    city: (parent: Location) => parent.city,
    state: (parent: Location) => parent.state
  };

  export type CityResolver =
    | ((
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type StateResolver =
    | ((
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    city:
      | ((
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Location,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    state:
      | ((
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Location,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace CostResolvers {
  export const defaultResolvers = {
    value: (parent: Cost) => parent.value
  };

  export type ValueResolver =
    | ((
        parent: Cost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Cost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type CostTypeResolver =
    | ((
        parent: Cost,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CostType | Promise<CostType>)
    | {
        fragment: string;
        resolve: (
          parent: Cost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CostType | Promise<CostType>;
      };

  export interface Type {
    value:
      | ((
          parent: Cost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Cost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    costType:
      | ((
          parent: Cost,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CostType | Promise<CostType>)
      | {
          fragment: string;
          resolve: (
            parent: Cost,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CostType | Promise<CostType>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface RegisterInput {
    email: string;
    password: string;
    name: string;
    phone: string;
    type: UserType;
  }
  export interface LoginInput {
    email: string;
    password: string;
  }
  export interface CreatePropertyInput {
    title: string;
    location: LocationInput;
    costValue: number;
    costType: CostType;
    images: string[];
    description: string;
  }
  export interface LocationInput {
    city: string;
    state: string;
  }

  export interface ArgsRegister {
    input: RegisterInput;
  }

  export interface ArgsLogin {
    input: LoginInput;
  }

  export interface ArgsCreateProperty {
    input: CreatePropertyInput;
  }

  export interface ArgsDeleteProperty {
    id: string;
  }

  export type RegisterResolver =
    | ((
        parent: undefined,
        args: ArgsRegister,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RegisterResult | Promise<RegisterResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => LoginResult | Promise<LoginResult>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>;
      };

  export type CreatePropertyResolver =
    | ((
        parent: undefined,
        args: ArgsCreateProperty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Property | Promise<Property>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property | Promise<Property>;
      };

  export type DeletePropertyResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteProperty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    register:
      | ((
          parent: undefined,
          args: ArgsRegister,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RegisterResult | Promise<RegisterResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRegister,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RegisterResult | Promise<RegisterResult>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => LoginResult | Promise<LoginResult>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => LoginResult | Promise<LoginResult>;
        };

    createProperty:
      | ((
          parent: undefined,
          args: ArgsCreateProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property | Promise<Property>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateProperty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Property | Promise<Property>;
        };

    deleteProperty:
      | ((
          parent: undefined,
          args: ArgsDeleteProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteProperty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace RegisterResultResolvers {
  export const defaultResolvers = {
    token: (parent: RegisterResult) =>
      parent.token === undefined ? null : parent.token,
    message: (parent: RegisterResult) => parent.message
  };

  export type TokenResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type MessageResolver =
    | ((
        parent: RegisterResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    token:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    message:
      | ((
          parent: RegisterResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: RegisterResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace LoginResultResolvers {
  export const defaultResolvers = {
    token: (parent: LoginResult) =>
      parent.token === undefined ? null : parent.token,
    message: (parent: LoginResult) => parent.message
  };

  export type TokenResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type MessageResolver =
    | ((
        parent: LoginResult,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    token:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    message:
      | ((
          parent: LoginResult,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: LoginResult,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Property: PropertyResolvers.Type;
  Location: LocationResolvers.Type;
  Cost: CostResolvers.Type;
  Mutation: MutationResolvers.Type;
  RegisterResult: RegisterResultResolvers.Type;
  LoginResult: LoginResultResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
