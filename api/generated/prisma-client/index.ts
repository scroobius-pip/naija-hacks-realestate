// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contact: (where?: ContactWhereInput) => Promise<boolean>;
  property: (where?: PropertyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contact: (where: ContactWhereUniqueInput) => ContactNullablePromise;
  contacts: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contact>;
  contactsConnection: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactConnectionPromise;
  property: (where: PropertyWhereUniqueInput) => PropertyNullablePromise;
  properties: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Property>;
  propertiesConnection: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PropertyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (args: {
    data: ContactUpdateInput;
    where: ContactWhereUniqueInput;
  }) => ContactPromise;
  updateManyContacts: (args: {
    data: ContactUpdateManyMutationInput;
    where?: ContactWhereInput;
  }) => BatchPayloadPromise;
  upsertContact: (args: {
    where: ContactWhereUniqueInput;
    create: ContactCreateInput;
    update: ContactUpdateInput;
  }) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;
  createProperty: (data: PropertyCreateInput) => PropertyPromise;
  updateProperty: (args: {
    data: PropertyUpdateInput;
    where: PropertyWhereUniqueInput;
  }) => PropertyPromise;
  updateManyProperties: (args: {
    data: PropertyUpdateManyMutationInput;
    where?: PropertyWhereInput;
  }) => BatchPayloadPromise;
  upsertProperty: (args: {
    where: PropertyWhereUniqueInput;
    create: PropertyCreateInput;
    update: PropertyUpdateInput;
  }) => PropertyPromise;
  deleteProperty: (where: PropertyWhereUniqueInput) => PropertyPromise;
  deleteManyProperties: (where?: PropertyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
  property: (
    where?: PropertySubscriptionWhereInput
  ) => PropertySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CostType = "Rent" | "Sale";

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "number_ASC"
  | "number_DESC";

export type PropertyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "costValue_ASC"
  | "costValue_DESC"
  | "costType_ASC"
  | "costType_DESC"
  | "ownerId_ASC"
  | "ownerId_DESC"
  | "ownerName_ASC"
  | "ownerName_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserType = "Agency" | "Individual";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "type_ASC"
  | "type_DESC"
  | "cac_ASC"
  | "cac_DESC"
  | "tin_ASC"
  | "tin_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<String>;
  number_not?: Maybe<String>;
  number_in?: Maybe<String[] | String>;
  number_not_in?: Maybe<String[] | String>;
  number_lt?: Maybe<String>;
  number_lte?: Maybe<String>;
  number_gt?: Maybe<String>;
  number_gte?: Maybe<String>;
  number_contains?: Maybe<String>;
  number_not_contains?: Maybe<String>;
  number_starts_with?: Maybe<String>;
  number_not_starts_with?: Maybe<String>;
  number_ends_with?: Maybe<String>;
  number_not_ends_with?: Maybe<String>;
  property?: Maybe<PropertyWhereInput>;
  AND?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  OR?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  NOT?: Maybe<ContactWhereInput[] | ContactWhereInput>;
}

export interface PropertyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  costValue?: Maybe<Int>;
  costValue_not?: Maybe<Int>;
  costValue_in?: Maybe<Int[] | Int>;
  costValue_not_in?: Maybe<Int[] | Int>;
  costValue_lt?: Maybe<Int>;
  costValue_lte?: Maybe<Int>;
  costValue_gt?: Maybe<Int>;
  costValue_gte?: Maybe<Int>;
  costType?: Maybe<CostType>;
  costType_not?: Maybe<CostType>;
  costType_in?: Maybe<CostType[] | CostType>;
  costType_not_in?: Maybe<CostType[] | CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  ownerName_not?: Maybe<String>;
  ownerName_in?: Maybe<String[] | String>;
  ownerName_not_in?: Maybe<String[] | String>;
  ownerName_lt?: Maybe<String>;
  ownerName_lte?: Maybe<String>;
  ownerName_gt?: Maybe<String>;
  ownerName_gte?: Maybe<String>;
  ownerName_contains?: Maybe<String>;
  ownerName_not_contains?: Maybe<String>;
  ownerName_starts_with?: Maybe<String>;
  ownerName_not_starts_with?: Maybe<String>;
  ownerName_ends_with?: Maybe<String>;
  ownerName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  OR?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  NOT?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
}

export type PropertyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  cac?: Maybe<String>;
  tin?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  properties_every?: Maybe<PropertyWhereInput>;
  properties_some?: Maybe<PropertyWhereInput>;
  properties_none?: Maybe<PropertyWhereInput>;
  type?: Maybe<UserType>;
  type_not?: Maybe<UserType>;
  type_in?: Maybe<UserType[] | UserType>;
  type_not_in?: Maybe<UserType[] | UserType>;
  cac?: Maybe<String>;
  cac_not?: Maybe<String>;
  cac_in?: Maybe<String[] | String>;
  cac_not_in?: Maybe<String[] | String>;
  cac_lt?: Maybe<String>;
  cac_lte?: Maybe<String>;
  cac_gt?: Maybe<String>;
  cac_gte?: Maybe<String>;
  cac_contains?: Maybe<String>;
  cac_not_contains?: Maybe<String>;
  cac_starts_with?: Maybe<String>;
  cac_not_starts_with?: Maybe<String>;
  cac_ends_with?: Maybe<String>;
  cac_not_ends_with?: Maybe<String>;
  tin?: Maybe<String>;
  tin_not?: Maybe<String>;
  tin_in?: Maybe<String[] | String>;
  tin_not_in?: Maybe<String[] | String>;
  tin_lt?: Maybe<String>;
  tin_lte?: Maybe<String>;
  tin_gt?: Maybe<String>;
  tin_gte?: Maybe<String>;
  tin_contains?: Maybe<String>;
  tin_not_contains?: Maybe<String>;
  tin_starts_with?: Maybe<String>;
  tin_not_starts_with?: Maybe<String>;
  tin_ends_with?: Maybe<String>;
  tin_not_ends_with?: Maybe<String>;
  contacts_every?: Maybe<ContactWhereInput>;
  contacts_some?: Maybe<ContactWhereInput>;
  contacts_none?: Maybe<ContactWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ContactCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  number: String;
  property: PropertyCreateOneInput;
}

export interface PropertyCreateOneInput {
  create?: Maybe<PropertyCreateInput>;
  connect?: Maybe<PropertyWhereUniqueInput>;
}

export interface PropertyCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  city: String;
  state: String;
  costValue: Int;
  costType: CostType;
  ownerId: ID_Input;
  ownerName: String;
  images?: Maybe<PropertyCreateimagesInput>;
  description: String;
}

export interface PropertyCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface ContactUpdateInput {
  name?: Maybe<String>;
  number?: Maybe<String>;
  property?: Maybe<PropertyUpdateOneRequiredInput>;
}

export interface PropertyUpdateOneRequiredInput {
  create?: Maybe<PropertyCreateInput>;
  update?: Maybe<PropertyUpdateDataInput>;
  upsert?: Maybe<PropertyUpsertNestedInput>;
  connect?: Maybe<PropertyWhereUniqueInput>;
}

export interface PropertyUpdateDataInput {
  title?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  costValue?: Maybe<Int>;
  costType?: Maybe<CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  images?: Maybe<PropertyUpdateimagesInput>;
  description?: Maybe<String>;
}

export interface PropertyUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface PropertyUpsertNestedInput {
  update: PropertyUpdateDataInput;
  create: PropertyCreateInput;
}

export interface ContactUpdateManyMutationInput {
  name?: Maybe<String>;
  number?: Maybe<String>;
}

export interface PropertyUpdateInput {
  title?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  costValue?: Maybe<Int>;
  costType?: Maybe<CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  images?: Maybe<PropertyUpdateimagesInput>;
  description?: Maybe<String>;
}

export interface PropertyUpdateManyMutationInput {
  title?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  costValue?: Maybe<Int>;
  costType?: Maybe<CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  images?: Maybe<PropertyUpdateimagesInput>;
  description?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone: String;
  name: String;
  password: String;
  properties?: Maybe<PropertyCreateManyInput>;
  type: UserType;
  cac?: Maybe<String>;
  tin?: Maybe<String>;
  contacts?: Maybe<ContactCreateManyInput>;
}

export interface PropertyCreateManyInput {
  create?: Maybe<PropertyCreateInput[] | PropertyCreateInput>;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
}

export interface ContactCreateManyInput {
  create?: Maybe<ContactCreateInput[] | ContactCreateInput>;
  connect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  properties?: Maybe<PropertyUpdateManyInput>;
  type?: Maybe<UserType>;
  cac?: Maybe<String>;
  tin?: Maybe<String>;
  contacts?: Maybe<ContactUpdateManyInput>;
}

export interface PropertyUpdateManyInput {
  create?: Maybe<PropertyCreateInput[] | PropertyCreateInput>;
  update?: Maybe<
    | PropertyUpdateWithWhereUniqueNestedInput[]
    | PropertyUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PropertyUpsertWithWhereUniqueNestedInput[]
    | PropertyUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  set?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  disconnect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  deleteMany?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  updateMany?: Maybe<
    | PropertyUpdateManyWithWhereNestedInput[]
    | PropertyUpdateManyWithWhereNestedInput
  >;
}

export interface PropertyUpdateWithWhereUniqueNestedInput {
  where: PropertyWhereUniqueInput;
  data: PropertyUpdateDataInput;
}

export interface PropertyUpsertWithWhereUniqueNestedInput {
  where: PropertyWhereUniqueInput;
  update: PropertyUpdateDataInput;
  create: PropertyCreateInput;
}

export interface PropertyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  costValue?: Maybe<Int>;
  costValue_not?: Maybe<Int>;
  costValue_in?: Maybe<Int[] | Int>;
  costValue_not_in?: Maybe<Int[] | Int>;
  costValue_lt?: Maybe<Int>;
  costValue_lte?: Maybe<Int>;
  costValue_gt?: Maybe<Int>;
  costValue_gte?: Maybe<Int>;
  costType?: Maybe<CostType>;
  costType_not?: Maybe<CostType>;
  costType_in?: Maybe<CostType[] | CostType>;
  costType_not_in?: Maybe<CostType[] | CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerId_not?: Maybe<ID_Input>;
  ownerId_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_not_in?: Maybe<ID_Input[] | ID_Input>;
  ownerId_lt?: Maybe<ID_Input>;
  ownerId_lte?: Maybe<ID_Input>;
  ownerId_gt?: Maybe<ID_Input>;
  ownerId_gte?: Maybe<ID_Input>;
  ownerId_contains?: Maybe<ID_Input>;
  ownerId_not_contains?: Maybe<ID_Input>;
  ownerId_starts_with?: Maybe<ID_Input>;
  ownerId_not_starts_with?: Maybe<ID_Input>;
  ownerId_ends_with?: Maybe<ID_Input>;
  ownerId_not_ends_with?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  ownerName_not?: Maybe<String>;
  ownerName_in?: Maybe<String[] | String>;
  ownerName_not_in?: Maybe<String[] | String>;
  ownerName_lt?: Maybe<String>;
  ownerName_lte?: Maybe<String>;
  ownerName_gt?: Maybe<String>;
  ownerName_gte?: Maybe<String>;
  ownerName_contains?: Maybe<String>;
  ownerName_not_contains?: Maybe<String>;
  ownerName_starts_with?: Maybe<String>;
  ownerName_not_starts_with?: Maybe<String>;
  ownerName_ends_with?: Maybe<String>;
  ownerName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  OR?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  NOT?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
}

export interface PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput;
  data: PropertyUpdateManyDataInput;
}

export interface PropertyUpdateManyDataInput {
  title?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  costValue?: Maybe<Int>;
  costType?: Maybe<CostType>;
  ownerId?: Maybe<ID_Input>;
  ownerName?: Maybe<String>;
  images?: Maybe<PropertyUpdateimagesInput>;
  description?: Maybe<String>;
}

export interface ContactUpdateManyInput {
  create?: Maybe<ContactCreateInput[] | ContactCreateInput>;
  update?: Maybe<
    | ContactUpdateWithWhereUniqueNestedInput[]
    | ContactUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ContactUpsertWithWhereUniqueNestedInput[]
    | ContactUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  connect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  set?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  disconnect?: Maybe<ContactWhereUniqueInput[] | ContactWhereUniqueInput>;
  deleteMany?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  updateMany?: Maybe<
    | ContactUpdateManyWithWhereNestedInput[]
    | ContactUpdateManyWithWhereNestedInput
  >;
}

export interface ContactUpdateWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput;
  data: ContactUpdateDataInput;
}

export interface ContactUpdateDataInput {
  name?: Maybe<String>;
  number?: Maybe<String>;
  property?: Maybe<PropertyUpdateOneRequiredInput>;
}

export interface ContactUpsertWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput;
  update: ContactUpdateDataInput;
  create: ContactCreateInput;
}

export interface ContactScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<String>;
  number_not?: Maybe<String>;
  number_in?: Maybe<String[] | String>;
  number_not_in?: Maybe<String[] | String>;
  number_lt?: Maybe<String>;
  number_lte?: Maybe<String>;
  number_gt?: Maybe<String>;
  number_gte?: Maybe<String>;
  number_contains?: Maybe<String>;
  number_not_contains?: Maybe<String>;
  number_starts_with?: Maybe<String>;
  number_not_starts_with?: Maybe<String>;
  number_ends_with?: Maybe<String>;
  number_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  OR?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
  NOT?: Maybe<ContactScalarWhereInput[] | ContactScalarWhereInput>;
}

export interface ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput;
  data: ContactUpdateManyDataInput;
}

export interface ContactUpdateManyDataInput {
  name?: Maybe<String>;
  number?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  type?: Maybe<UserType>;
  cac?: Maybe<String>;
  tin?: Maybe<String>;
}

export interface ContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactWhereInput>;
  AND?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  OR?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  NOT?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
}

export interface PropertySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PropertyWhereInput>;
  AND?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
  OR?: Maybe<PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput>;
  NOT?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Contact {
  id: ID_Output;
  name: String;
  number: String;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<String>;
  property: <T = PropertyPromise>() => T;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  property: <T = PropertySubscription>() => T;
}

export interface ContactNullablePromise
  extends Promise<Contact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<String>;
  property: <T = PropertyPromise>() => T;
}

export interface Property {
  id: ID_Output;
  title: String;
  city: String;
  state: String;
  costValue: Int;
  costType: CostType;
  ownerId: ID_Output;
  ownerName: String;
  images: String[];
  description: String;
}

export interface PropertyPromise extends Promise<Property>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  costValue: () => Promise<Int>;
  costType: () => Promise<CostType>;
  ownerId: () => Promise<ID_Output>;
  ownerName: () => Promise<String>;
  images: () => Promise<String[]>;
  description: () => Promise<String>;
}

export interface PropertySubscription
  extends Promise<AsyncIterator<Property>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  costValue: () => Promise<AsyncIterator<Int>>;
  costType: () => Promise<AsyncIterator<CostType>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  ownerName: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface PropertyNullablePromise
  extends Promise<Property | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  costValue: () => Promise<Int>;
  costType: () => Promise<CostType>;
  ownerId: () => Promise<ID_Output>;
  ownerName: () => Promise<String>;
  images: () => Promise<String[]>;
  description: () => Promise<String>;
}

export interface ContactConnection {
  pageInfo: PageInfo;
  edges: ContactEdge[];
}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactEdge>>() => T;
  aggregate: <T = AggregateContactPromise>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactEdge {
  node: Contact;
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T = ContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T = ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PropertyConnection {
  pageInfo: PageInfo;
  edges: PropertyEdge[];
}

export interface PropertyConnectionPromise
  extends Promise<PropertyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PropertyEdge>>() => T;
  aggregate: <T = AggregatePropertyPromise>() => T;
}

export interface PropertyConnectionSubscription
  extends Promise<AsyncIterator<PropertyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PropertyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePropertySubscription>() => T;
}

export interface PropertyEdge {
  node: Property;
  cursor: String;
}

export interface PropertyEdgePromise
  extends Promise<PropertyEdge>,
    Fragmentable {
  node: <T = PropertyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PropertyEdgeSubscription
  extends Promise<AsyncIterator<PropertyEdge>>,
    Fragmentable {
  node: <T = PropertySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProperty {
  count: Int;
}

export interface AggregatePropertyPromise
  extends Promise<AggregateProperty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePropertySubscription
  extends Promise<AsyncIterator<AggregateProperty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  phone: String;
  name: String;
  password: String;
  type: UserType;
  cac?: String;
  tin?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<UserType>;
  cac: () => Promise<String>;
  tin: () => Promise<String>;
  contacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  properties: <T = Promise<AsyncIterator<PropertySubscription>>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<UserType>>;
  cac: () => Promise<AsyncIterator<String>>;
  tin: () => Promise<AsyncIterator<String>>;
  contacts: <T = Promise<AsyncIterator<ContactSubscription>>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<UserType>;
  cac: () => Promise<String>;
  tin: () => Promise<String>;
  contacts: <T = FragmentableArray<Contact>>(args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  node: Contact;
  updatedFields: String[];
  previousValues: ContactPreviousValues;
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactPreviousValuesPromise>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactPreviousValuesSubscription>() => T;
}

export interface ContactPreviousValues {
  id: ID_Output;
  name: String;
  number: String;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<String>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
}

export interface PropertySubscriptionPayload {
  mutation: MutationType;
  node: Property;
  updatedFields: String[];
  previousValues: PropertyPreviousValues;
}

export interface PropertySubscriptionPayloadPromise
  extends Promise<PropertySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PropertyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PropertyPreviousValuesPromise>() => T;
}

export interface PropertySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PropertySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PropertySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PropertyPreviousValuesSubscription>() => T;
}

export interface PropertyPreviousValues {
  id: ID_Output;
  title: String;
  city: String;
  state: String;
  costValue: Int;
  costType: CostType;
  ownerId: ID_Output;
  ownerName: String;
  images: String[];
  description: String;
}

export interface PropertyPreviousValuesPromise
  extends Promise<PropertyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  costValue: () => Promise<Int>;
  costType: () => Promise<CostType>;
  ownerId: () => Promise<ID_Output>;
  ownerName: () => Promise<String>;
  images: () => Promise<String[]>;
  description: () => Promise<String>;
}

export interface PropertyPreviousValuesSubscription
  extends Promise<AsyncIterator<PropertyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  costValue: () => Promise<AsyncIterator<Int>>;
  costType: () => Promise<AsyncIterator<CostType>>;
  ownerId: () => Promise<AsyncIterator<ID_Output>>;
  ownerName: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  phone: String;
  name: String;
  password: String;
  type: UserType;
  cac?: String;
  tin?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  type: () => Promise<UserType>;
  cac: () => Promise<String>;
  tin: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<UserType>>;
  cac: () => Promise<AsyncIterator<String>>;
  tin: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Contact",
    embedded: false
  },
  {
    name: "Property",
    embedded: false
  },
  {
    name: "CostType",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://172.105.149.215:4466/`
});
export const prisma = new Prisma();
