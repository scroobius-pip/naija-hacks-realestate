
type Property {
   id: String!
  title: String!
  city: String
  state: String
  costValue: Int!
  costType:CostType!
  owner:User!
  images: [String!]
  description: String
  featured:Boolean
}

enum CostType {
  Rent
  Sale
}
enum UserType {
Agency
Individual
}


type Location {
  city: String!
  state: String!
}

input LocationInput {
  city: String!
  state: String!
}


type Cost {
  value:Int!
  costType: CostType!
}


type User {
id: ID!
email: String!
phone: String!
name: String!
type: UserType!
properties: [Property!]!
point: UserPoint
}

type UserPoint {
  propertyPoints:[PropertyPoint!]!
  totalProfit:Float!
  totalPoints:Int!
}

type PropertyPoint {
propertyId:String!
propertyTitle:String!
points: Int!
profit: Float!
}


type Query {
me:User
properties(type:CostType!):[Property]!
property(id:ID!):Property
currentRate:Float!
featuredProperties:[Property]!
}

type Mutation {
    register(input:RegisterInput!):RegisterResult!
    login(input:LoginInput!):LoginResult!
    createProperty(input:CreatePropertyInput!):ID!
    deleteProperty(id:ID!):Boolean!
    contactAgent(input:ContactAgentInput!):Boolean!
}

input ContactAgentInput {
  propertyId:String!
  name: String!
  number:String!
  referrerId: String!
  email: String!
  notes: String!
}

input RegisterInput {
email: String!
password: String!
name:String!
phone: String!
cac:String
tin:String
type:UserType!
}


type RegisterResult {
  token: String
  message: String!
}

type LoginResult {
  token: String
  message: String!
}

input LoginInput {
  email: String!
  password: String!

}

input CreatePropertyInput {
  title: String!
  location: LocationInput!
  costValue:Int!
  costType: CostType!
  featured:Boolean!
  images: [String!]!
  description: String!
}

